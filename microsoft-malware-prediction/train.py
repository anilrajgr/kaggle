import pandas as pd
import glob
import shutil
import sys
import numpy as np
# from IPython.display import display, HTML
# import matplotlib.pyplot as plt
import math
from time import time
# from sklearn.impute import SimpleImputer
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.metrics import fbeta_score
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
import pickle
from scipy.special import boxcox1p
import os
# from past.builtins import execfile
from sklearn.utils import shuffle
from process_df import process_df, train_check
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.optimizers import SGD

def intersection(lst1, lst2):
    return list(set(lst1) & set(lst2))

"""
dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }

file = 'data/train.csv'
df = pd.read_csv(file, dtype=dtypes)
print("Read done")

file = 'data/test.csv'
test_df = pd.read_csv(file, dtype=dtypes)
print("Read file done")

df = shuffle(df)
print("Shuffle done")

print(df.shape)
newlen = int(len(df.index) / 10)
df = df[:newlen]
print(df.shape)
print("Reduce data set done")

s1 = test_df['MachineIdentifier']


drop_list2 = ['MachineIdentifier']
df.drop(drop_list2, axis=1, inplace=True)
test_df.drop(drop_list2, axis=1, inplace=True)
print("Drop done")

# Split the data in features and target label
labels = df['HasDetections']
features = df.drop('HasDetections', axis=1)
print("Split done")

features = process_df(features)
print("Train Process done")
test_df = process_df(test_df)
print("Test Process done")
print(features.shape)

test_df_columns = list(test_df.columns.values)
features_columns = list(features.columns.values)
needed_columns = intersection(test_df_columns, features_columns)
features = features[needed_columns]
test_df = test_df[needed_columns]
print("Picking common columns done")

s1.to_pickle('data/s1.pkl')
labels.to_pickle('data/labels.pkl')
features.to_pickle('data/features.pkl')
test_df.to_pickle('data/test_df.pkl')

"""

with open('data/s1.pkl', 'rb') as f:
    s1 = pickle.load(f)
with open('data/labels.pkl', 'rb') as f:
    labels = pickle.load(f)
with open('data/features.pkl', 'rb') as f:
    features = pickle.load(f)
with open('data/test_df.pkl', 'rb') as f:
    test_df = pickle.load(f)

X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size = 0.2, random_state = 0)
print("Train-Test split done")

#--------------
# clf = GaussianNB()
#--------------
# clf = XGBClassifier()
#--------------
# create model
clf = Sequential()
clf.add(Dense(200, input_dim=len(features.columns), activation='relu'))
clf.add(Dropout(0.2))
clf.add(Dense(100, activation='relu'))
clf.add(Dense(50, activation='relu'))
clf.add(Dropout(0.2))
clf.add(Dense(25, activation='relu'))
clf.add(Dense(10, activation='relu'))
clf.add(Dense(1, activation='sigmoid'))
# Compile model
sgd = SGD(lr=0.5)
clf.compile(loss='binary_crossentropy', optimizer=sgd, metrics=['accuracy'])
#--------------
print("CLF assignment done")

print(y_train.unique())
trained_model = train_check(clf, len(y_train), X_train, y_train, X_test, y_test)
print("Train-Predict done")

predictions_test = trained_model.predict_classes(test_df)
print('Prediction done')

with open('trained_model.pkl', 'wb') as f:
    pickle.dump(trained_model, f)
print("PKL Write done")

print('Training done')

print(type(predictions_test))
# print(predictions_test.shape)
print(predictions_test[0:])
s2 = pd.Series(predictions_test.ravel())
submission = pd.concat([s1, s2], axis=1)
submission.columns = ['MachineIdentifier', 'HasDetections']
print('Store submission done')

submission.to_csv('results.csv', index=False)

print('Test prediction done')
