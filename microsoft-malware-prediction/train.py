import pandas as pd
import glob
import shutil
import sys
import numpy as np
from IPython.display import display, HTML
import matplotlib.pyplot as plt
import math
from time import time
# from sklearn.impute import SimpleImputer
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.metrics import fbeta_score
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
import pickle
from scipy.special import boxcox1p
import os
from past.builtins import execfile
from sklearn.utils import shuffle
from process_df import process_df, train_predict
from keras.models import Sequential
from keras.layers import Dense

def intersection(lst1, lst2):
    return list(set(lst1) & set(lst2))


file = 'data/train.csv'
df = pd.read_csv(file)
print("Read done")

file = 'data/test.csv'
test_df = pd.read_csv(file)
print("Read file done")

df = shuffle(df)
print("Shuffle done")

print(df.shape)
newlen = int(len(df.index) / 10)
df = df[:newlen]
print(df.shape)
print("Reduce data set done")

s1 = test_df['MachineIdentifier']

drop_list2 = ['MachineIdentifier']
df.drop(drop_list2, axis=1, inplace=True)
test_df.drop(drop_list2, axis=1, inplace=True)
print("Drop done")

# Split the data in features and target label
labels = df['HasDetections']
features = df.drop('HasDetections', axis=1)
print("Split done")

features = process_df(features)
print("Train Process done")
test_df = process_df(test_df)
print("Test Process done")
print(features.shape)

test_df_columns = list(test_df.columns.values)
features_columns = list(features.columns.values)
needed_columns = intersection(test_df_columns, features_columns)
features = features[needed_columns]
test_df = test_df[needed_columns]
print("Picking common columns done")

labels.to_pickle('labels.pkl')
features.to_pickle('features.pkl')
test_df.to_pickle('test_df.pkl')

labels = pd.read_csv('labels.pkl')
features = pd.read_csv('features.pkl')
test_df = pd.read_csv('test_df.pkl')

X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size = 0.2, random_state = 0)
print("Train-Test split done")

#--------------
# clf = GaussianNB()
#--------------
#clf = XGBClassifier()
#--------------
# create model
clf = Sequential()
clf.add(Dense(100, input_dim=len(features.columns), activation='relu'))
clf.add(Dense(50, activation='relu'))
clf.add(Dense(100, activation='relu'))
clf.add(Dense(50, activation='relu'))
clf.add(Dense(25, activation='relu'))
clf.add(Dense(10, activation='relu'))
clf.add(Dense(1, activation='sigmoid'))
# Compile model
clf.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
#--------------
print("CLF assignment done")

trained_model = train_predict(clf, len(y_train), X_train, y_train, X_test, y_test)
print("Train-Predict done")

predictions_test = trained_model.predict(test_df)
print('Prediction done')

with open('trained_model.pkl', 'wb') as f:
    pickle.dump(trained_model, f)
print("PKL Write done")

print('Training done')

s2 = pd.Series(predictions_test)
submission = pd.concat([s1, s2], axis=1)
submission.columns = ['MachineIdentifier', 'HasDetections']
print('Store submission done')

submission.to_csv('results.csv', index=False)

print('Test prediction done')
