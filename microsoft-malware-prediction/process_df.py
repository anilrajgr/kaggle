def process_df(df):
    drop_list = ['PuaMode',
                 'Census_ProcessorClass',
                 'DefaultBrowsersIdentifier',
                 'Census_IsFlightingInternal',
                 'ProductName', 
                 'Platform', 
                 'Processor', 
                 'OsPlatformSubRelease',
                 'SkuEdition', 
                 'SmartScreen', 
                 'Census_MDC2FormFactor',
                 'Census_DeviceFamily', 
                 'Census_PrimaryDiskTypeName',
                 'Census_ChassisTypeName', 
                 'Census_PowerPlatformRoleName',
                 'Census_InternalBatteryType', 
                 'Census_OSArchitecture',
                 'Census_OSBranch', 
                 'Census_OSEdition', 
                 'Census_OSSkuName',
                 'Census_OSInstallTypeName', 
                 'Census_OSWUAutoUpdateOptionsName',
                 'Census_GenuineStateName', 
                 'Census_ActivationChannel',
                 'Census_FlightRing', 
                 'EngineVersion_2', 
                 'EngineVersion_3',
                 'AppVersion_1', 
                 'AppVersion_2', 
                 'AppVersion_3', 
                 'AvSigVersion_0',
                 'AvSigVersion_1', 
                 'AvSigVersion_2', 
                 'OsVer_0', 
                 'OsVer_1', 
                 'OsVer_2',
                 'OsVer_3', 
                 'OsBuildLab_0', 
                 'OsBuildLab_1', 
                 'OsBuildLab_2',
                 'OsBuildLab_3', 
                 'OsBuildLab_4', 
                 'OsBuildLab_5', 
                 'Census_OSVersion_0',
                 'Census_OSVersion_1', 
                 'Census_OSVersion_2', 
                 'Census_OSVersion_3'
                 ]
    
    # Blindly replace all nan with 0.
    # This has to be change later.
    df = df.replace(np.nan, 0)
    
    df['EngineVersion_0'] = df['EngineVersion'].apply(break_and_get_part, position=0)
    df['EngineVersion_1'] = df['EngineVersion'].apply(break_and_get_part, position=1)
    df['EngineVersion_2'] = df['EngineVersion'].apply(break_and_get_part, position=2)
    df['EngineVersion_3'] = df['EngineVersion'].apply(break_and_get_part, position=3)
    
    df['AppVersion_0'] = df['AppVersion'].apply(break_and_get_part, position=0)
    df['AppVersion_1'] = df['AppVersion'].apply(break_and_get_part, position=1)
    df['AppVersion_2'] = df['AppVersion'].apply(break_and_get_part, position=2)
    df['AppVersion_3'] = df['AppVersion'].apply(break_and_get_part, position=3)
    
    df['AvSigVersion_0'] = df['AvSigVersion'].apply(break_and_get_part, position=0)
    df['AvSigVersion_1'] = df['AvSigVersion'].apply(break_and_get_part, position=1)
    df['AvSigVersion_2'] = df['AvSigVersion'].apply(break_and_get_part, position=2)
    df['AvSigVersion_3'] = df['AvSigVersion'].apply(break_and_get_part, position=3)
    
    drop_list.append('EngineVersion')
    drop_list.append('AppVersion')
    drop_list.append('AvSigVersion')
    
    df['OsVer_0'] = df['OsVer'].apply(break_and_get_part, position=0)
    df['OsVer_1'] = df['OsVer'].apply(break_and_get_part, position=1)
    df['OsVer_2'] = df['OsVer'].apply(break_and_get_part, position=2)
    df['OsVer_3'] = df['OsVer'].apply(break_and_get_part, position=3)
    drop_list.append('OsVer')
    
    df['OsBuildLab_0'] = df['OsBuildLab'].apply(break_and_get_part_osbuildlab, position=0)
    df['OsBuildLab_1'] = df['OsBuildLab'].apply(break_and_get_part_osbuildlab, position=1)
    df['OsBuildLab_2'] = df['OsBuildLab'].apply(break_and_get_part_osbuildlab, position=2)
    df['OsBuildLab_3'] = df['OsBuildLab'].apply(break_and_get_part_osbuildlab, position=3)
    df['OsBuildLab_4'] = df['OsBuildLab'].apply(break_and_get_part_osbuildlab, position=4)
    df['OsBuildLab_5'] = df['OsBuildLab'].apply(break_and_get_part_osbuildlab, position=5)
    drop_list.append('OsBuildLab')
    
    df.loc[df.SmartScreen == 'off', 'SmartScreen'] = "Off"
    df.loc[df.SmartScreen == 'on', 'SmartScreen'] = "On"
    df.loc[df.SmartScreen == 'OFF', 'SmartScreen'] = "Off"
    df.loc[df.SmartScreen == 'requireAdmin', 'SmartScreen'] = "RequireAdmin"
    df.loc[df.SmartScreen == 'Promt', 'SmartScreen'] = "Prompt"
    df.loc[df.SmartScreen == 'prompt', 'SmartScreen'] = "Prompt"
    df.loc[df.SmartScreen == 'warn', 'SmartScreen'] = "Warn"
    df.loc[df.SmartScreen == 'requireadmin', 'SmartScreen'] = "RequireAdmin"
    
    df['Census_OSVersion_0'] = df['Census_OSVersion'].apply(break_and_get_part, position=0)
    df['Census_OSVersion_1'] = df['Census_OSVersion'].apply(break_and_get_part, position=1)
    df['Census_OSVersion_2'] = df['Census_OSVersion'].apply(break_and_get_part, position=2)
    df['Census_OSVersion_3'] = df['Census_OSVersion'].apply(break_and_get_part, position=3)
    drop_list.append('Census_OSVersion')
    
    drop_list.append('EngineVersion_0')
    drop_list.append('EngineVersion_1')
    drop_list.append('AppVersion_0')
    drop_list.append('AvSigVersion_3')

    df.drop(drop_list, axis=1, inplace=True)

    skewed_features = df.apply(lambda x: skew(x.dropna())).sort_values(ascending=False)
    skewness = pd.DataFrame({'Skew': skewed_features})
    skewness = skewness[abs(skewness) > 0.75]

    skewed_features = skewness.index
    lam = 0.15
    for feat in skewed_features:
        df[feat] = boxcox1p(df[feat], lam)
    
    return df

